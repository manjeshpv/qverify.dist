{"version":3,"sources":["api/case/case.controller.js"],"names":[],"mappings":"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","file":"api/case/case.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/cases              ->  index\n * POST    /api/cases              ->  create\n * GET     /api/cases/:id          ->  show\n * PUT     /api/cases/:id          ->  update\n * DELETE  /api/cases/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport db, {Case, User, CaseType,Status, Minio, CaseAddressVerification, CaseCriminalVerification, CaseEducationVerification, CaseSiteVerification} from '../../sqldb';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function (entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function (entity) {\n    return entity.updateAttributes(updates)\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function (entity) {\n    if (entity) {\n      return entity.destroy()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function (entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode, err) {\n  console.log(err);\n  statusCode = statusCode || 500;\n  res.status(statusCode).send(err);\n}\n\n// Gets a list of Cases\nexport function index(req, res) {\n  if (!req.user.id)\n    return res.status(404).json([{message: \"not authorized\"}]);\n  let whereClause;\n  if (req.user.Company.user_type_id != 1) {\n    whereClause = {\n      user_id: req.user.id\n    };\n  }\n  return Case.findAll({\n      where: whereClause,\n      include: [Status, CaseType]\n    })\n    .then(respondWithResult(res))\n    .catch(err => handleError(res, 500, err));\n}\n\n// Gets a single Case from the DB\nexport function show(req, res) {\n  return Case.find({\n      where: {\n        id: req.params.id\n      },\n      include: [\n        {model: CaseCriminalVerification, include: [db.Designation]},\n        {model: CaseAddressVerification, include: [db.HouseType]},\n        {model: CaseEducationVerification, include: [db.Degree, db.Designation]},\n        {model: CaseSiteVerification, include: [db.Designation]},\n        {model: User}\n      ]\n    })\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(err => handleError(res, 500, err));\n}\n\n// Gets a single Case from the DB\nexport function vendorUploaded(req, res) {\n  return Case.findAll({\n      include: [Status],\n      where: {status_id: [2, 3, 4]}\n    })\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(err => handleError(res, 500, err));\n}\n\nexport function getFile(req, res) {\n  return Case.findById(req.params.id).then(caseObj => {\n    return Minio.downloadLink({\n      object: caseObj.pdf,\n      name: `${caseObj.id}.pdf`\n    }).then(link => res.redirect(link))\n  }).catch(err => handleError(res, 500, err))\n}\n\n// Creates a new Case in the DB\nexport function create(req, res) {\n  req.body.status_id = 1;\n  return db.Case.create(req.body)\n    .then((caseObj) => {\n      /* Start Minio */\n      const { base64:base64String, filename } = req.body.logo;\n      const extention = filename.substring(filename.lastIndexOf('.') + 1);\n\n// only upload if valid file extension\n      if (~['doc', 'docx', 'pdf', 'rtf', 'txt','png','jpeg'].indexOf(extention)) {\n\n        const rangeFolder = caseObj.id - (caseObj.id % 100000);\n        const minioObject = {\n          // object: 'cases/0/5/5.pdf'\n          object: `cases/${rangeFolder}/${caseObj.id}/${caseObj.id}.${extention.toLowerCase()}`,\n          base64String: base64String,\n        }\n\n        // Async\n        Minio.base64Upload(minioObject).then(re => {\n          return caseObj.update({pdf: minioObject.object})\n          console.log(\"file saved success\")\n        }).catch(err => console.log(err))\n      }\n\n      /* End Minio */\n\n      let casePr;\n      switch (req.body.case_type_id) {\n        case 1:\n          req.body.address = {};\n          req.body.address.case_id = caseObj.id;\n          casePr = db.CaseAddressVerification.create(req.body.address)\n          break;\n        case 2:\n          req.body.criminal.case_id = caseObj.id;\n          casePr = db.CaseCriminalVerification.create(req.body.criminal)\n          break;\n        case 3:\n          req.body.education.case_id = caseObj.id;\n          casePr = db.CaseEducationVerification.create(req.body.education)\n          break;\n        case 4:\n          req.body.site = {};\n          req.body.site.case_id = caseObj.id;\n          casePr = db.CaseSiteVerification.create(req.body.site)\n          break;\n      }\n\n      return casePr.then(()=> {\n        return res.json(caseObj);\n      })\n\n    })\n    .catch(err => handleError(res, 500, err));\n}\n//export function update(req, res) {\n//  var model = req.body;\n//  var uploadFlag = model.flag;\n//  if(uploadFlag == true){\n//    // upload state file if exists\n//    if (req.body.case && req.body.case.filename) {\n//      const { base64, filename } = req.body.case;\n//      const extention = filename.substring(filename.lastIndexOf('.') + 1);\n//\n//      // only upload if valid file extension\n//      if (~['doc', 'docx', 'pdf', 'rtf', 'txt'].indexOf(extention)) {\n//        const rangeFolder = model.applicant_id - (model.applicant_id % 10000);\n//        const path = `Applicants/${rangeFolder}/${model.applicant_id}/` +\n//          `${moment().format('D-MM-YY-h_mm_ss')}.${extention}`;\n//\n//        // Write file to QDMS\n//        fs.writeFile(`${config.QDMS_PATH}/${path}`, base64, 'base64', err => {\n//          if (err) return logger.error(model.id, err);\n//          return db.Case.build({\n//              applicant_state_id: model.applicant_state_id,\n//              path, created_by: req.user.id,\n//            })\n//            .save()\n//            .then(stateFile => {\n//              return stateFile.update({path:path})\n//                .then(result => {\n//                  return res.json({message: \"success\"});\n//                })\n//            }) // save file path to database\n//            .catch(logger.error);\n//        });\n//      } else {\n//        logger.error(model.id, 'Invalid applicant state file upload');\n//      }\n//    }\n//  }else{\n//    // upload state file if exists\n//    if (req.body.state_file && req.body.state_file.filename) {\n//      const { base64, filename } = req.body.state_file;\n//      const extention = filename.substring(filename.lastIndexOf('.') + 1);\n//\n//      // only upload if valid file extension\n//      if (~['doc', 'docx', 'pdf', 'rtf', 'txt'].indexOf(extention)) {\n//        const rangeFolder = model.applicant_id - (model.applicant_id % 10000);\n//        const path = `Applicants/${rangeFolder}/${model.applicant_id}/` +\n//          `${moment().format('D-MM-YY-h_mm_ss')}.${extention}`;\n//\n//        // Write file to QDMS\n//        fs.writeFile(`${config.QDMS_PATH}/${path}`, base64, 'base64', err => {\n//          if (err) return logger.error(model.id, err);\n//          return  db.StateFile.find({\n//              where: {\n//                id: model.id\n//              }\n//            })\n//            .then(handleEntityNotFound(res))\n//            .then(stateFile => {\n//              return stateFile.update({path:path})\n//                .then(result => {\n//                  return res.json({message: \"success\"});\n//                })\n//            })\n//            .catch(err => handleError(res, 500, err));\n//        });\n//      } else {\n//        logger.error(model.id, 'Invalid applicant state file upload');\n//      }\n//    }\n//  }\n//}\n\n// Updates an existing Case in the DB\nexport function update(req, res) {\n  if (!req.query) {\n    return res.status(404).json({message: 'Invalid data'});\n  }\n  return Case.update(req.query, {\n      where: {\n        id: req.params.id\n      }\n    })\n    .then(respondWithResult(res))\n    .catch(err => handleError(res, 500, err));\n}\n\n// Deletes a Case from the DB\nexport function destroy(req, res) {\n  return Case.find({\n      where: {\n        _id: req.params.id\n      }\n    })\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(err => handleError(res, 500, err));\n}\n"],"sourceRoot":"/source/"}