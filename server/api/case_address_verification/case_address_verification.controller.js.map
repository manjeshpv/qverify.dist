{"version":3,"sources":["api/case_address_verification/case_address_verification.controller.js"],"names":[],"mappings":"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","file":"api/case_address_verification/case_address_verification.controller.js","sourcesContent":["/**\n * Using Rails-like standard naming convention for endpoints.\n * GET     /api/case_address_verifications              ->  index\n * POST    /api/case_address_verifications              ->  create\n * GET     /api/case_address_verifications/:id          ->  show\n * PUT     /api/case_address_verifications/:id          ->  update\n * DELETE  /api/case_address_verifications/:id          ->  destroy\n */\n\n'use strict';\n\nimport _ from 'lodash';\nimport db, {CaseAddressVerification, Minio, Case} from '../../sqldb';\n\nfunction respondWithResult(res, statusCode) {\n  statusCode = statusCode || 200;\n  return function (entity) {\n    if (entity) {\n      res.status(statusCode).json(entity);\n    }\n  };\n}\n\nfunction saveUpdates(updates) {\n  return function (entity) {\n    return entity.updateAttributes(updates)\n      .then(updated => {\n        return updated;\n      });\n  };\n}\n\nfunction removeEntity(res) {\n  return function (entity) {\n    if (entity) {\n      return entity.destroy()\n        .then(() => {\n          res.status(204).end();\n        });\n    }\n  };\n}\n\nfunction handleEntityNotFound(res) {\n  return function (entity) {\n    if (!entity) {\n      res.status(404).end();\n      return null;\n    }\n    return entity;\n  };\n}\n\nfunction handleError(res, statusCode, err) {\n  console.log(err)\n  return res.status(statusCode).send(err);\n}\n\n// Gets a list of CaseAddressVerifications\nexport function index(req, res) {\n  return CaseAddressVerification.findAll()\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Gets a single CaseAddressVerification from the DB\nexport function show(req, res) {\n  return CaseAddressVerification.find({\n      where: {\n        _id: req.params.id\n      }\n    })\n    .then(handleEntityNotFound(res))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\nexport function getFile(req, res) {\n  return CaseAddressVerification.findById(req.params.id).then(caseObj => {\n    console.log(caseObj.image)\n    if(!caseObj.image) return res.status(404).json({message: 'not found'})\n    return Minio.downloadLink({\n      object: caseObj.image,\n      download: true,\n    }).then(link => res.redirect(link))\n  }).catch(err => handleError(res, 500, err))\n}\n\n// Creates a new CaseAddressVerification in the DB\nexport function create(req, res) {\n  req.body.status_id = 1;\n  return db.CaseAddressVerification.create(req.body)\n    .then((caseObj) => {\n      const { base64:base64String, filename } = req.body.img;\n      const extention = filename.substring(filename.lastIndexOf('.') + 1);\n\n      // only upload if valid file extension\n      if (~['doc', 'docx', 'pdf', 'rtf', 'txt'].indexOf(extention)) {\n\n        const rangeFolder = caseObj.id - (caseObj.id % 10000);\n        const minioObject = {\n          // object: 'cases/0/5/5.pdf'\n          object: `case_address_verifications/${rangeFolder}/${caseObj.id}/${caseObj.id}.${extention.toLowerCase()}`,\n          base64String: base64String,\n        }\n\n        Minio.base64Upload(minioObject).then(re => {\n          return caseObj.update({image: minioObject.object}).then(()=>{\n\n            console.log(\"file saved success\")\n            return Case.update({status_id:2},{\n              where:{id: caseObj.case_id}\n            }).then(()=>{\n              return res.json(caseObj);\n            }).catch(err => handleError(res, 500, err));\n          })\n        }).catch(err => handleError(res, 500, err));\n      }\n    })\n    .catch(err => handleError(res, 500, err));\n}\n\n// Updates an existing CaseAddressVerification in the DB\nexport function update(req, res) {\n  if (req.body._id) {\n    delete req.body._id;\n  }\n  return CaseAddressVerification.find({\n      where: {\n        _id: req.params.id\n      }\n    })\n    .then(handleEntityNotFound(res))\n    .then(saveUpdates(req.body))\n    .then(respondWithResult(res))\n    .catch(handleError(res));\n}\n\n// Deletes a CaseAddressVerification from the DB\nexport function destroy(req, res) {\n  return CaseAddressVerification.find({\n      where: {\n        _id: req.params.id\n      }\n    })\n    .then(handleEntityNotFound(res))\n    .then(removeEntity(res))\n    .catch(handleError(res));\n}\n"],"sourceRoot":"/source/"}