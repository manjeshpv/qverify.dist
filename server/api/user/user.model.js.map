{"version":3,"sources":["api/user/user.model.js"],"names":[],"mappings":"AAAA;;;;;;;;;;kBAKe,UAAU,SAAV,EAAqB,SAArB,EAAgC;AAC7C,SAAO,UAAU,MAAV,CAAiB,MAAjB,EAAyB;AAC9B,QAAI;AACF,YAAM,UAAU,OADd;AAEF,iBAAW,KAFT;AAGF,kBAAY,IAHV;AAIF,qBAAe;AAJb,KAD0B;AAO9B,UAAM,UAAU,MAPc;AAQ9B,cAAU,UAAU,MARU;AAS9B,cAAU,UAAU,MATU;AAU9B,WAAO,UAAU,MAVa;AAW9B,YAAQ,UAAU,MAXY;AAY9B,cAAU,UAAU,MAZU;AAa9B,eAAW,UAAU;AAbS,GAAzB,EAcJ;AACD,sBADC;AAED,iBAAa,IAFZ;AAGD,gBAAY,IAHX;AAID,eAAW,YAJV;AAKD,eAAW,YALV;AAMD,qBAAiB;AACf,qBAAe,SAAS,aAAT,CAAuB,MAAvB,EAA+B;AAAA;;AAC5C,eAAO,KACJ,sBADI,GAEJ,IAFI,CAEC;AAAA,iBAAY,MACf,gBADe,CACE,EAAE,kBAAF,EADF,EAEf,IAFe,CAEV,aAAK;AACT,gBAAM,OAAO,EAAE,MAAF,EAAb;AACA,kBAAK,YAAL,CAAkB,MAAlB;AACA,mBAAO,UAAP,CAAkB,mBAAlB,CAAsC,IAAtC,EAA4C,QAA5C;AACA,mBAAO,kBAAQ,OAAR,CAAgB,IAAhB,CAAP;AACD,WAPe,CAAZ;AAAA,SAFD,CAAP;AAUD,OAZc;;AAcf,8BAAwB,SAAS,sBAAT,GAAkC;AACxD,eAAO,sBAAY,UAAC,OAAD,EAAU,MAAV;AAAA,iBAAqB,OACrC,WADqC,CACzB,CADyB,EACtB,UAAC,GAAD,EAAM,GAAN,EAAc;AAC5B,gBAAI,GAAJ,EAAS,OAAO,OAAO,GAAP,CAAP;AACT,mBAAO,QAAQ,IAAI,QAAJ,CAAa,QAAb,EACZ,OADY,CACJ,KADI,EACG,GADH,EAEZ,OAFY,CAEJ,KAFI,EAEG,GAFH,EAGZ,OAHY,CAGJ,IAHI,EAGE,EAHF,CAAR,CAAP;AAKD,WARqC,CAArB;AAAA,SAAZ,CAAP;AASD,OAxBc;;AA0Bf,oBAAc,SAAS,YAAT,CAAsB,MAAtB,EAA8B;AAC1C,eAAO,kBAAQ,GAAR,CAAY,CACjB,OAAO,WAAP,CAAmB,MAAnB,CACE,EAAE,QAAQ,CAAV,EADF,EAEE,EAAE,OAAO,EAAE,SAAS,KAAK,EAAhB,EAAT,EAFF,CADiB,EAKjB,OAAO,YAAP,CAAoB,MAApB,CACE,EAAE,QAAQ,CAAV,EADF,EAEE,EAAE,OAAO,EAAE,SAAS,KAAK,EAAhB,EAAT,EAFF,CALiB,CAAZ,CAAP;AAUD,OArCc;;AAuCf,2BAAqB,SAAS,cAAT,CAAwB,QAAxB,EAAkC;AACrD,YAAM,aAAa,OAChB,UADgB,CACL,KADK,EAEhB,MAFgB,CAET,OAAO,QAFE,EAGhB,MAHgB,CAGT,KAHS,CAAnB;AAIA,eAAQ,eAAe,KAAK,QAArB,GACL,EAAE,IAAF,CAAO,KAAK,MAAL,EAAP,EAAsB,CAAC,IAAD,CAAtB,CADK,GAC2B,IAAI,KAAJ,CAAU,iBAAV,CADlC;AAED,OA9Cc;AA+Cf,sBAAgB,SAAS,cAAT,CAAwB,QAAxB,EAAkC,EAAlC,EAAsC;AACpD,eAAQ,KAAK,YAAL,CAAkB,QAAlB,MAAgC,KAAK,QAAtC,GACL,GAAG,IAAH,EAAS,KAAK,MAAL,EAAT,CADK,GACqB,GAAG,IAAI,KAAJ,CAAU,iBAAV,CAAH,CAD5B;AAED,OAlDc;;AAoDf,oBAAc,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AAC5C,eAAO,OACJ,UADI,CACO,KADP,EAEJ,MAFI,CAEG,OAAO,QAFV,EAGJ,MAHI,CAGG,KAHH,CAAP;AAID;AAzDc,KANhB;AAiED,kBAAc;AACZ,eADY,qBACF,MADE,EACM;AAChB;AACA;AACA;AACA,eAAO,IAAP,CAAY,SAAZ,CAAsB,OAAO,OAA7B,EAAsC;AACpC;AADoC,SAAtC;AAGA,eAAO,IAAP,CAAY,SAAZ,CAAsB,OAAO,IAA7B,EAAmC;AACjC;AADiC,SAAnC;AAGA,eAAO,IAAP,CAAY,SAAZ,CAAsB,OAAO,IAA7B,EAAmC;AACjC;AADiC,SAAnC;AAGA,eAAO,IAAP,CAAY,OAAZ,CAAoB,OAAO,IAA3B;AACA,eAAO,IAAP,CAAY,OAAZ,CAAoB,OAAO,UAA3B;AACD;AAhBW,KAjEb;AAmFD,WAAO;AACP,oBAAc,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AAC5C,YAAI,SAAS,OAAT,CAAiB,UAAjB,CAAJ,EAAkC;AAChC,mBACG,GADH,CACO,UADP,EACmB,SAAS,YAAT,CAAsB,SAAS,QAA/B,CADnB;AAED;AACF,OANM;;AAQP,oBAAc,SAAS,YAAT,CAAsB,QAAtB,EAAgC;AAC5C,YAAI,SAAS,OAAT,CAAiB,UAAjB,CAAJ,EAAkC;AAChC,mBACG,GADH,CACO,UADP,EACmB,SAAS,YAAT,CAAsB,SAAS,QAA/B,CADnB;AAED;AACF;AAbM;AAnFN,GAdI,CAAP;AAiHD,C;;AAnHD;;;;;;AAHA,IAAM,SAAS,QAAQ,QAAR,CAAf;AACA,IAAM,OAAO,kEAAb;AACA,IAAM,IAAI,QAAQ,QAAR,CAAV","file":"api/user/user.model.js","sourcesContent":["'use strict';\r\nconst crypto = require('crypto');\r\nconst salt = 'DYhG93b0fIxfs2guVoUubasdfajfkljasdjfaklsdjflakrfWwvniR2G0FgaC9mi';\r\nconst _ = require('lodash');\r\nimport config from \"../../config/environment\";\r\nexport default function (sequelize, DataTypes) {\r\n  return sequelize.define('User', {\r\n    id: {\r\n      type: DataTypes.INTEGER,\r\n      allowNull: false,\r\n      primaryKey: true,\r\n      autoIncrement: true\r\n    },\r\n    name: DataTypes.STRING,\r\n    username: DataTypes.STRING,\r\n    password: DataTypes.STRING,\r\n    email: DataTypes.STRING,\r\n    mobile: DataTypes.STRING,\r\n    is_admin: DataTypes.STRING,\r\n    is_active: DataTypes.INTEGER\r\n  }, {\r\n    tableName: `users`,\r\n    underscored: true,\r\n    timestamps: true,\r\n    updatedAt: 'updated_on',\r\n    createdAt: 'created_at',\r\n    instanceMethods: {\r\n      resetPassword: function resetPassword(models) {\r\n        return this\r\n          .generateRandomPassword()\r\n          .then(password => this\r\n            .updateAttributes({ password })\r\n            .then(u => {\r\n              const user = u.toJSON();\r\n              this.revokeTokens(models);\r\n              models.QueuedTask.resetPasswordNotify(user, password);\r\n              return Promise.resolve(user);\r\n            }));\r\n      },\r\n\r\n      generateRandomPassword: function generateRandomPassword() {\r\n        return new Promise((resolve, reject) => crypto\r\n          .randomBytes(6, (err, buf) => {\r\n            if (err) return reject(err);\r\n            return resolve(buf.toString('base64')\r\n              .replace(/\\+/g, '-')\r\n              .replace(/\\//g, '_')\r\n              .replace(/=/g, '')\r\n            );\r\n          }));\r\n      },\r\n\r\n      revokeTokens: function revokeTokens(models) {\r\n        return Promise.all([\r\n          models.AccessToken.update(\r\n            { status: 0 },\r\n            { where: { user_id: this.id } }\r\n          ),\r\n          models.RefreshToken.update(\r\n            { status: 0 },\r\n            { where: { user_id: this.id } }\r\n          ),\r\n        ]);\r\n      },\r\n\r\n      verifyPasswordAsync: function verifyPassword(password) {\r\n        const hashedPass = crypto\r\n          .createHash('md5')\r\n          .update(salt + password)\r\n          .digest('hex');\r\n        return (hashedPass === this.password) ?\r\n          _.pick(this.toJSON(), ['id']) : new Error('Check password!');\r\n      },\r\n      verifyPassword: function verifyPassword(password, cb) {\r\n        return (this.hashPassword(password) === this.password) ?\r\n          cb(null, this.toJSON()) : cb(new Error('Check password!'));\r\n      },\r\n\r\n      hashPassword: function hashPassword(password) {\r\n        return crypto\r\n          .createHash('md5')\r\n          .update(salt + password)\r\n          .digest('hex');\r\n      },\r\n    },\r\n    classMethods: {\r\n      associate(models) {\r\n        //models.User.belongsTo(models.UserType, {\r\n        //  foreignKey: `user_type_id`\r\n        //});\r\n        models.User.belongsTo(models.Company, {\r\n          foreignKey: `company_id`\r\n        });\r\n        models.User.belongsTo(models.User, {\r\n          foreignKey: `updated_by`\r\n        });\r\n        models.User.belongsTo(models.User, {\r\n          foreignKey: `created_by`\r\n        });\r\n        models.User.hasMany(models.Case);\r\n        models.User.hasMany(models.Allocation);\r\n      }\r\n    },\r\n    hooks: {\r\n    beforeCreate: function beforeCreate(instance) {\r\n      if (instance.changed('password')) {\r\n        instance\r\n          .set('password', instance.hashPassword(instance.password));\r\n      }\r\n    },\r\n\r\n    beforeUpdate: function beforeUpdate(instance) {\r\n      if (instance.changed('password')) {\r\n        instance\r\n          .set('password', instance.hashPassword(instance.password));\r\n      }\r\n    },\r\n  },\r\n  });\r\n}\r\n"],"sourceRoot":"/source/"}